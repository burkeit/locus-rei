-- MySQL Script generated by MySQL Workbench
-- Thu Apr 13 15:58:04 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema locus_rei
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema locus_rei
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `locus_rei` DEFAULT CHARACTER SET utf8 ;
USE `locus_rei` ;

-- -----------------------------------------------------
-- Table `locus_rei`.`Locations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Locations` (
  `ID` INT NOT NULL,
  `Type` VARCHAR(45) NULL COMMENT 'Box, shelf, drawer, cabinet, room, building, campus, etc.',
  `Address` VARCHAR(1024) NULL,
  `Image` BLOB NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Locations_Things1_idx` (`ID` ASC),
  CONSTRAINT `fk_Locations_Things1`
    FOREIGN KEY (`ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Things`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Things` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Type` ENUM('People', 'Objects', 'Locations', 'Departments') NOT NULL DEFAULT 'Objects',
  `Barcode` VARCHAR(64) NOT NULL COMMENT '64 characters ought to be long enough for a catalog ID, right?',
  `Location_ID` INT NULL COMMENT 'Must be nullable to break dependency loop on first Thing. And, I guess to import things without known locations, unless we want to assign them all to “world”.',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `thing_id_UNIQUE` (`ID` ASC),
  INDEX `fk_Things_Locations1_idx` (`Location_ID` ASC),
  UNIQUE INDEX `Barcode_UNIQUE` (`Barcode` ASC),
  CONSTRAINT `fk_Things_Locations1`
    FOREIGN KEY (`Location_ID`)
    REFERENCES `locus_rei`.`Locations` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`People`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`People` (
  `ID` INT NOT NULL,
  `FirstName` VARCHAR(45) NULL,
  `LastName` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(45) NULL,
  `Department` INT NOT NULL COMMENT 'What is this person’s home department? If they have none or multiple, still have to pick one.',
  `Status` ENUM('Active', 'Inactive') NOT NULL DEFAULT 'Active' COMMENT 'Active status can perform actions, inactive still exist for history, but can’t do anything.',
  `PIN` VARCHAR(8) NOT NULL DEFAULT '000000' COMMENT 'Not super concerned about security here, but possibly in the future this should be a real password.',
  `Image` BLOB NULL COMMENT 'Maybe we want a photo?\n',
  PRIMARY KEY (`ID`),
  INDEX `fk_People_Things1_idx` (`ID` ASC),
  UNIQUE INDEX `thing_id_UNIQUE` (`ID` ASC),
  CONSTRAINT `fk_People_Things1`
    FOREIGN KEY (`ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Events` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Timestamp` DATETIME NOT NULL COMMENT 'Time of the event in UTC. Application must handle time zone conversion.',
  `Person_ID` INT NOT NULL COMMENT 'The person doing the action.',
  `Action` ENUM('Create', 'Delete', 'Activate', 'Deactivate', 'Checkout', 'Checkin') NOT NULL COMMENT 'What’s being done: ‘Create\', \'Delete\', \'Activate\', \'Deactivate\', \'Checkout\', \'Checkin\'',
  `Object_ID` INT NOT NULL COMMENT 'The thing being acted upon.',
  `Target_ID` INT NULL COMMENT 'Allowed to be null so that actions can include “destroyed” and “created”.',
  `Notes` VARCHAR(1024) NULL COMMENT 'Space for text notes about the event. Attachments handled in separate table.',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `event_id_UNIQUE` (`ID` ASC),
  INDEX `fk_Events_Things1_idx` (`Object_ID` ASC),
  INDEX `fk_Events_Things2_idx` (`Target_ID` ASC),
  INDEX `fk_Events_People1_idx` (`Person_ID` ASC),
  CONSTRAINT `fk_Events_Things1`
    FOREIGN KEY (`Object_ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Events_Things2`
    FOREIGN KEY (`Target_ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Events_People1`
    FOREIGN KEY (`Person_ID`)
    REFERENCES `locus_rei`.`People` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Departments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Departments` (
  `ID` INT NOT NULL,
  `Name` VARCHAR(45) NOT NULL,
  `Owner` INT NULL COMMENT 'Every collection should have one person ultimately responsible for it. Must be nullable, though, so that department can be created before owning person is.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Departments_Things1_idx` (`ID` ASC),
  INDEX `fk_Departments_People1_idx` (`Owner` ASC),
  CONSTRAINT `fk_Departments_Things1`
    FOREIGN KEY (`ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Departments_People1`
    FOREIGN KEY (`Owner`)
    REFERENCES `locus_rei`.`People` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Objects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Objects` (
  `ID` INT NOT NULL,
  `Department_ID` INT NOT NULL COMMENT 'What collection/department is this object owned by?',
  `Status` ENUM('Active', 'Inactive') NOT NULL DEFAULT 'Active' COMMENT 'Inactive: destroyed, lost, etc. Application should enforce no changes but status change.',
  `Name` VARCHAR(64) NULL COMMENT 'Optional display name',
  `External_ID` VARCHAR(45) NULL COMMENT 'If for some reason this object needs to be barcoded with something other than its native catalog id, what is its native catalog id?',
  `Image` BLOB NULL COMMENT 'Primary image for object, separate from images attached to events?\n',
  PRIMARY KEY (`ID`),
  INDEX `fk_Objects_Things1_idx` (`ID` ASC),
  INDEX `fk_Objects_Departments1_idx` (`Department_ID` ASC),
  CONSTRAINT `fk_Objects_Things1`
    FOREIGN KEY (`ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Objects_Departments1`
    FOREIGN KEY (`Department_ID`)
    REFERENCES `locus_rei`.`Departments` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Event_Attachments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Event_Attachments` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Event_ID` INT NOT NULL COMMENT 'Event this attachment belongs to',
  `Attachment` BLOB NOT NULL COMMENT 'Blob, for storage of image, pdf, movie, audio recording, whatever.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Event_Attachments_Events1_idx` (`Event_ID` ASC),
  CONSTRAINT `fk_Event_Attachments_Events1`
    FOREIGN KEY (`Event_ID`)
    REFERENCES `locus_rei`.`Events` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
