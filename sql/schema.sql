-- MySQL Script generated by MySQL Workbench
-- Fri Apr 14 16:23:32 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema locus_rei
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema locus_rei
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `locus_rei` DEFAULT CHARACTER SET utf8 ;
USE `locus_rei` ;

-- -----------------------------------------------------
-- Table `locus_rei`.`Location`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Location` (
  `ID` INT NOT NULL,
  `Type` VARCHAR(45) NULL COMMENT 'Box, shelf, drawer, cabinet, room, building, campus, etc.',
  `Name` VARCHAR(45) NULL COMMENT 'Optional human-readable name of location.',
  `Address` VARCHAR(1024) NULL,
  `Image` BLOB NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Locations_Things1_idx` (`ID` ASC),
  CONSTRAINT `fk_Locations_Things1`
    FOREIGN KEY (`ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Things`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Things` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Type` ENUM('Person', 'Department', 'Object', 'Location') NOT NULL DEFAULT 'Object' COMMENT 'So we can find out what kind of thing it is from its barcode.',
  `Barcode` VARCHAR(64) NOT NULL COMMENT '64 characters ought to be long enough for a catalog ID, right?',
  `Location_ID` INT NULL DEFAULT 1 COMMENT 'Must be nullable to break dependency loop on first Thing. And, I guess to import things without known locations, unless we want to assign them all to “world”. Default is 1, for “Unknown”.',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `thing_id_UNIQUE` (`ID` ASC),
  INDEX `fk_Things_Locations1_idx` (`Location_ID` ASC),
  UNIQUE INDEX `Barcode_UNIQUE` (`Barcode` ASC),
  CONSTRAINT `fk_Things_Locations1`
    FOREIGN KEY (`Location_ID`)
    REFERENCES `locus_rei`.`Location` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Person` (
  `ID` INT NOT NULL,
  `FirstName` VARCHAR(45) NULL,
  `LastName` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(45) NULL,
  `Department_ID` INT NOT NULL DEFAULT 2 COMMENT 'What is this person’s home department? If they have none or multiple, still have to pick one. Default is 2, which will be “No Department”',
  `Status` ENUM('Active', 'Inactive') NOT NULL DEFAULT 'Active' COMMENT 'Active status can perform actions, inactive still exist for history, but can’t do anything.',
  `PIN` VARCHAR(8) NOT NULL DEFAULT '000000' COMMENT 'Not super concerned about security here, but possibly in the future this should be a real password.',
  `Image` BLOB NULL COMMENT 'Maybe we want a photo?\n',
  PRIMARY KEY (`ID`),
  INDEX `fk_People_Things1_idx` (`ID` ASC),
  UNIQUE INDEX `thing_id_UNIQUE` (`ID` ASC),
  CONSTRAINT `fk_People_Things1`
    FOREIGN KEY (`ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Event` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Timestamp` DATETIME NOT NULL COMMENT 'Time of the event in UTC. Application must handle time zone conversion.',
  `Person_ID` INT NOT NULL COMMENT 'The person doing the action.',
  `Action` ENUM('Create', 'Delete', 'Activate', 'Deactivate', 'Checkout', 'Checkin') NOT NULL COMMENT 'What’s being done: ‘Create\', \'Delete\', \'Activate\', \'Deactivate\', \'Checkout\', \'Checkin\'',
  `Object_ID` INT NOT NULL COMMENT 'The thing being acted upon.',
  `Target_ID` INT NULL COMMENT 'Allowed to be null so that actions can include “destroyed” and “created”.',
  `Notes` VARCHAR(1024) NULL COMMENT 'Space for text notes about the event. Attachments handled in separate table.',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `event_id_UNIQUE` (`ID` ASC),
  INDEX `fk_Events_Things1_idx` (`Object_ID` ASC),
  INDEX `fk_Events_Things2_idx` (`Target_ID` ASC),
  INDEX `fk_Events_People1_idx` (`Person_ID` ASC),
  CONSTRAINT `fk_Events_Things1`
    FOREIGN KEY (`Object_ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Events_Things2`
    FOREIGN KEY (`Target_ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Events_People1`
    FOREIGN KEY (`Person_ID`)
    REFERENCES `locus_rei`.`Person` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Department` (
  `ID` INT NOT NULL,
  `Name` VARCHAR(45) NOT NULL,
  `Owner_ID` INT NULL DEFAULT 3 COMMENT 'Every collection should have one person ultimately responsible for it. Must be nullable, though, so that department can be created before owning person is. Default is 3, for “Nobody”',
  PRIMARY KEY (`ID`),
  INDEX `fk_Departments_Things1_idx` (`ID` ASC),
  INDEX `fk_Departments_People1_idx` (`Owner_ID` ASC),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC),
  CONSTRAINT `fk_Departments_Things1`
    FOREIGN KEY (`ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Departments_People1`
    FOREIGN KEY (`Owner_ID`)
    REFERENCES `locus_rei`.`Person` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Object`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Object` (
  `ID` INT NOT NULL,
  `Department_ID` INT NOT NULL DEFAULT 2 COMMENT 'What collection/department is this object owned by? Default: 2, “No Department”',
  `Status` ENUM('Active', 'Inactive') NOT NULL DEFAULT 'Active' COMMENT 'Inactive: destroyed, lost, etc. Application should enforce no changes but status change.',
  `Name` VARCHAR(64) NULL COMMENT 'Optional display name',
  `External_Label` VARCHAR(45) NULL COMMENT 'If for some reason this object needs to be barcoded with something other than its native catalog id, what is its native catalog id?',
  `Image` BLOB NULL COMMENT 'Primary image for object, separate from images attached to events?\n',
  PRIMARY KEY (`ID`),
  INDEX `fk_Objects_Things1_idx` (`ID` ASC),
  INDEX `fk_Objects_Departments1_idx` (`Department_ID` ASC),
  CONSTRAINT `fk_Objects_Things1`
    FOREIGN KEY (`ID`)
    REFERENCES `locus_rei`.`Things` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Objects_Departments1`
    FOREIGN KEY (`Department_ID`)
    REFERENCES `locus_rei`.`Department` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `locus_rei`.`Event_Attachments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Event_Attachments` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Event_ID` INT NOT NULL COMMENT 'Event this attachment belongs to',
  `Attachment` BLOB NOT NULL COMMENT 'Blob, for storage of image, pdf, movie, audio recording, whatever.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Event_Attachments_Events1_idx` (`Event_ID` ASC),
  CONSTRAINT `fk_Event_Attachments_Events1`
    FOREIGN KEY (`Event_ID`)
    REFERENCES `locus_rei`.`Event` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `locus_rei` ;

-- -----------------------------------------------------
-- Placeholder table for view `locus_rei`.`People`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`People` (`ID` INT, `NetID` INT, `Firstname` INT, `Lastname` INT, `Email` INT, `DeptName` INT, `Status` INT, `PIN` INT);

-- -----------------------------------------------------
-- Placeholder table for view `locus_rei`.`Objects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Objects` (`ID` INT, `Barcode` INT, `Name` INT, `ExternalID` INT, `DeptName` INT, `LocationCode` INT, `LocationType` INT, `Status` INT);

-- -----------------------------------------------------
-- Placeholder table for view `locus_rei`.`Locations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Locations` (`ID` INT, `Barcode` INT, `Name` INT, `Type` INT, `ParentLoc` INT, `ParentType` INT, `ParentBarcode` INT);

-- -----------------------------------------------------
-- Placeholder table for view `locus_rei`.`Departments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locus_rei`.`Departments` (`ID` INT, `Barcode` INT, `Name` INT, `OwnerFirst` INT, `OwnerLast` INT, `OwnerEmail` INT);

-- -----------------------------------------------------
-- View `locus_rei`.`People`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `locus_rei`.`People`;
USE `locus_rei`;
CREATE  OR REPLACE VIEW `People` AS
    SELECT 
        t.ID AS ID,
        t.Barcode AS NetID,
        p.Firstname,
        p.Lastname,
        p.Email,
        d.Name AS DeptName,
        p.Status,
        p.PIN
    FROM
        Person AS p
            INNER JOIN
        Things AS t ON p.ID = t.ID
            INNER JOIN
        Department AS d ON p.Department_ID = d.ID
;

-- -----------------------------------------------------
-- View `locus_rei`.`Objects`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `locus_rei`.`Objects`;
USE `locus_rei`;
CREATE  OR REPLACE VIEW `Objects` AS
    SELECT 
        t.ID,
        t.Barcode,
        o.Name,
        o.External_Label AS ExternalID,
        d.Name AS DeptName,
        lt.Barcode AS LocationCode,
        lt.Type AS LocationType,
        o.Status
    FROM
        Object AS o
            INNER JOIN
        Things AS t ON o.ID = t.ID
            INNER JOIN
        Department AS d ON o.Department_ID = d.ID
            INNER JOIN
        Things AS lt ON lt.ID = t.Location_ID
	;

-- -----------------------------------------------------
-- View `locus_rei`.`Locations`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `locus_rei`.`Locations`;
USE `locus_rei`;
CREATE  OR REPLACE VIEW `Locations` AS
    SELECT 
        t.ID,
        t.Barcode,
        l.Name,
        l.Type,
        p.Name AS ParentLoc,
        p.Type AS ParentType,
        pt.Barcode AS ParentBarcode
    FROM
        Location AS l
            INNER JOIN
        Things AS t ON l.ID = t.ID
            INNER JOIN
        Location AS p ON t.`Location_ID` = p.ID
            INNER JOIN
        Things AS pt ON pt.ID = p.ID
;

-- -----------------------------------------------------
-- View `locus_rei`.`Departments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `locus_rei`.`Departments`;
USE `locus_rei`;
CREATE  OR REPLACE VIEW `Departments` AS
    SELECT 
        t.ID,
        t.Barcode,
        d.Name,
        p.FirstName AS OwnerFirst,
        p.Lastname AS OwnerLast,
        p.Email AS OwnerEmail
    FROM
        Department AS d
            INNER JOIN
        Things AS t ON t.ID = d.ID
            INNER JOIN
        Person AS p ON d.Owner_ID = p.ID
;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
